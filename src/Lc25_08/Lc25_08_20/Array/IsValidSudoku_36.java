package Lc25_08.Lc25_08_20.Array;


// {25.8.18}(数组) 有效数独
/**
 *<li>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * <li>数字 1-9 在每一行只能出现一次。
 * <li>数字 1-9 在每一列只能出现一次。
 * <li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 */
public class IsValidSudoku_36 {
    public static void main(String[] args) {
        Solution36 solution36 = new Solution36();

        // true
        char[][] board1 = new char[][]{{'5','3','.','.','7','.','.','.','.'}
                                      ,{'6','.','.','1','9','5','.','.','.'}
                                      ,{'.','9','8','.','.','.','.','6','.'}
                                      ,{'8','.','.','.','6','.','.','.','3'}
                                      ,{'4','.','.','8','.','3','.','.','1'}
                                      ,{'7','.','.','.','2','.','.','.','6'}
                                      ,{'.','6','.','.','.','.','2','8','.'}
                                      ,{'.','.','.','4','1','9','.','.','5'}
                                      ,{'.','.','.','.','8','.','.','7','9'}};
        System.out.println(solution36.isValidSudoku(board1));
        // false
        char[][] board2 = new char[][]{{'8','3','.','.','7','.','.','.','.'}
                                      ,{'6','.','.','1','9','5','.','.','.'}
                                      ,{'.','9','8','.','.','.','.','6','.'}
                                      ,{'8','.','.','.','6','.','.','.','3'}
                                      ,{'4','.','.','8','.','3','.','.','1'}
                                      ,{'7','.','.','.','2','.','.','.','6'}
                                      ,{'.','6','.','.','.','.','2','8','.'}
                                      ,{'.','.','.','4','1','9','.','.','5'}
                                      ,{'.','.','.','.','8','.','.','7','9'}};
        System.out.println(solution36.isValidSudoku(board2));
    }
}


// 1.就按他的要求写代码
class Solution36 {
    public boolean isValidSudoku(char[][] board) {

        return  true;
    }
}
